                lw      0       2       stP             set x2 = 32767 (maximum value for 15 bit)
                lw      0       3       arrAdd          set x3 = address of array
                lw      0       5       num1            set x5 = input1     
                sw      3       5       0               store num1 to index 0  
                lw      0       5       num2            set x5 = input2
                sw      3       5       1               store num1 to index 1 
                lw      0       5       num3            set x5 = input3
                sw      3       5       2               store num1 to index 2 
                lw      0       5       num4            set x5 = input4
                sw      3       5       3               store num1 to index 3 
                lw      0       5       num5            set x5 = input5
                sw      3       5       4               store num1 to index 4
                lw      0       5       BBsort          set x5 = 15 (sort addres)
                jalr    5       1                       go to sort function (jumpTo sort)
                beq     0       0       exit            end code
                lw      0       5       None            set x5 = -1  => {BBsort}
                add     2       5       2               x2 = x2 - 1 (push stack down)
                sw      2       1       0               store return address (x1) to stack
loop1           lw      0       5       Pone            set x6 = 1 (i = 1)
                add     6       5       6               x6 = x6 + 1 (i = i + 1)       
                lw      0       4       lenght          set x4 = lenght of array (n)     
                beq     6       4       enloop          if x4 = x6 jumpTo endloop (i = n)
                lw      0       4       None            set x4 = -1
                add     6       4       7               set x7 = x6 - 1 (j = i - 1)
loop2           lw      0       4       None            set x4 = -1
                beq     7       4       loop1           if x7 = -1 jumpTo loop1
                lw      0       3       arrAdd          set x3 = 10000 address of array()
                add     7       3       5               x5 = x7 + x3
                lw      5       3       0               load index at j to x3 (v[j])
                lw      5       4       1               load index at j + 1 to x4 (v[j+1])
                lw      0       5       Pone            set x5 = 1
                nand    3       3       3               x3 = x3 nand x3 (two complement step 1)
                add     3       5       3               x3 = x3 + 1 (two complement step 2)
                add     4       3       3               x3 = x4 - x3
                lw      0       5       last            set x5 = 2^30
                add     5       5       5               shif left x5 (x5 = x5 * 2)
                nand    3       5       3               x3 = x3 nand x5 (get bit31 step 1)
                nand    3       3       3               x3 = x3 nand x3 (get bit31 step 2)
                beq     3       0       loop1           if x3 = 0 (x3 < x4) jumpTo loop1 (break)
                lw      0       4       swap            set x4 = 34 (swap addres)
                jalr    4       1                       go to swap function (jumpTo swap)
                lw      0       4       None            set x4 = -1
                add     7       4       7               x7 = x7 - 1 (j = j - 1)
                beq     0       0       loop2           jumpTo loop2
enloop          lw      2       1       0               load return address to x1
                lw      0       4       Pone            set x4 = 1
                add     2       4       2               x2 = x2 + 1 (push stack up)
                jalr    1       0                       out from sort function
                lw      0       3       arrAdd          set x3 = 10000 address of array() => {swap}
                add     7       3       5               x5 = x7 + x3
                lw      5       3       0               load index at j to x3 (v[j])
                lw      5       4       1               load index at j + 1 to x4 (v[j+1])
                sw      5       3       1               store x3 to array index at j + 1 
                sw      5       4       0               store x4 to array index at j 
                jalr    1       0                       out from swap function (black to sort function)
exit            lw      0       7       arrAdd          set x7 = 10000 address of array()
                lw      7       1       0               load value in array index[0] to x1
                lw      7       2       1               load value in array index[1] to x2
                lw      7       3       2               load value in array index[2] to x3
                lw      7       4       3               load value in array index[3] to x4
                lw      7       5       4               load value in array index[4] to x5
                add     0       0       6               set x6 = 0
                halt
stP             .fill   32767                           maximum value for 15 bit
arrAdd          .fill   10000                           address of array, defined: 10000
last	        .fill	1073741824                      for get bit 31
BBsort          .fill   15                              sort function's addres
swap            .fill   48                              swap function's addres
Ntwo            .fill   -2                              const -2
None            .fill   -1                              const -1
Pone            .fill   1                               const 1
lenght          .fill   5                               lenght of array
num1            .fill   7                               number 1
num2            .fill   6                              number 2
num3            .fill   7                               number 3
num4            .fill   -1                              number 4
num5            .fill   10                               number 5
